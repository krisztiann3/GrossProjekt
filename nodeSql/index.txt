

const bodyParser = require('body-parser');
const mySql = require('mysql');

const util = require('util');



const nodemailer = require('nodemailer');
const pdfDocument = require('pdfkit');
const fs = require('fs');
const { text } = require('pdfkit');
const router = express.Router();


const db = mySql.createPool({
    host: process.env.db_hostname,
    user: process.env.db_user,
    passwrod: process.env.db_password,
    database: process.env.db_database,
    waitForConnections:true,
    connectionLimit:10,
    queueLimit:0
})

    // Cron időzítő és részei
const task = cron.schedule('1 * * * *', () => {
    console.log("sad")
    try {
        db.query("DELETE FROM `blacklist` WHERE exp_date <  DATE_SUB(NOW(),INTERVAL 1 HOUR)", (req,results) =>{
        if(err){
            console.log(err)
        }else{
            console.log("A lejárt elemek törölve lettek.")
        }
        })
    } catch (error) {
        console.log(error)
        task.end()
        console.log('Megállítva')
    }
});
task.start();
app.use(bodyParser.json());
app.use(cors());








    // termékek elérési út
app.get('/termekek/:termekek',async(req,res) => {
    const termekek = req.params.termekek
    try {
        if(termekek == 'polok'){
            const result = await query('SELECT * FROM polok')
            res.status(200).json({
                status:'succes',termekek:result
            })
        }
        else if(termekek == 'puloverek'){
            const result = await query('SELECT * FROM puloverek')
            res.status(200).json({
                status:'succes',termekek:result
            })
        }else if(termekek == 'nadragok'){
            const result = await query('SELECT * FROM nadragok')
            res.status(200).json({
                status:'succes',termekek:result
            })
        }
        else{
            res.status(400).json({
                error : 'nincs ilyen termék'
            });
        }
    } catch (error) {
        res.status(500).json({
            error : error.message
        });
    }
})

app.post('/termekek/:termekek',async(req,res)=>{
    const termekek = req.params.termekek
    const {
        kep,
        megnevezes,
        meret,
        osszeg
    } = req.body

    if(!kep || !megnevezes || !meret || !osszeg){
        res.status(401).json({
            error: 'Hibás adatok'
        });
    }
    try {
        await query('INSERT INTO '+ termekek +' (`kep`, `megnevezes`, `meret`, `osszeg`) VALUES (?,?,?,?)', [kep,megnevezes,meret,osszeg])
        res.status(201).json({
            status: 'sikeres feltöltés'
        })
    } catch (error) {
        res.status(401).json({
            error: error
        });
    }
})

    //termék elérési út id alapján
app.get('/termekek/:termekek/:id',async(req,res) => {
    const termekek = req.params.termekek
    const id = req.params.id
    try {
        if(termekek == 'polok'){
            const result = await query('SELECT * FROM polok WHERE id=?',[id])
            res.status(200).json({
                status:'succes',termekek:result
            })
        }
        else if(termekek == 'puloverek'){
            const result = await query('SELECT * FROM puloverek WHERE id=?',[id])
            res.status(200).json({
                status:'succes',termekek:result
            })
        }else if(termekek == 'nadragok'){
            const result = await query('SELECT * FROM nadragok WHERE id=?',[id])
            res.status(200).json({
                status:'succes',termekek:result
            })
        }
        else{
            res.status(400).json({
                error : 'nincs ilyen termék'
            });
        }
    } catch (error) {
        res.status(500).json({
            error : error.message
        });
    }
})



    //emailkülés
var transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: 'noreplygrosskidz1@gmail.com',
        pass: 'tujqowkfhrdyulse'
    }
    });


app.post('/vasarlas',auth,async(req,res) =>{
    const doc = new pdfDocument();
    const token = req.headers.authorization;
    const decode = jwt.verify(token,process.env.secret);
    const email = decode.email;
    const {kosar} = req.body
    const pfdId = Math.floor((1 + Math.random()) * 0x100000000)
    .toString(16)
    .substring(1);

    

   //email-pdf rész
    var mailOptions = {
    from: 'noreplygrosskidz1@gmail.com',
    to: email,
    subject: 'No-reply rendelés',
    text: 'Rendelését fogadtuk, csomagja állapotának változásáról értesítjük.',
    attachments:[
    {   // file on disk as an attachment
        filename: 'szamla.pdf',
        path: `./temp/pdf/${pfdId}.pdf`
    }],
    }

    

    // pdf létrehozása
    doc.pipe(fs.createWriteStream(`./temp/pdf/${pfdId}.pdf`))

    // Hozzáadott elemek formázása
    doc.fontSize(25)
    
    .text('GrossKidz számlája!', 120, 120)
    .underline(120, 120, 360, 27, { color: '#000000' })
    
    .moveDown();
    for (let i = 0; i < kosar.length; i++) {     
            doc.moveDown();  
            doc.scale(0.6)
            .text('Termék megnevezése:',220+i,520,)
            .text(kosar[i].megnevezes,)
            .text('Termék mennyisége:',)
            .text(kosar[i].mennyiseg,)
            .text('Összege:')
            .text(kosar[i].osszeg * kosar[i].mennyiseg +'Ft')
            doc.restore();
            
        }
       
    

    doc.underline(120, 120, 360, 27, { color: '#000000' })
    doc.end();

    //email küldés pdf-el, pdf törlés
    transporter.sendMail(mailOptions,async function(error, info){
    if (error) {
        console.log(error);
    } else {
        try {
            fs.unlink(`./temp/pdf/${pfdId}.pdf`, function (err) {
                    console.log('Sikeres törlés');
                })
        } catch (error) {
            console.log(error)
        }
        res.send('Email elküldve: ' + info.response);
    }});
})





